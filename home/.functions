# Get software updates, and update installed Ruby gems, Homebrew, npm, and their installed packages.
function update {
    case $(uname) in
        Darwin)
            echo "\n===[ Apple Software Update ]===============================" && \
            sudo softwareupdate -i -a
            echo "\n===[ App Store ]===========================================" && \
            mas upgrade
            echo "\n===[ Homebrew ]============================================" && \
            brew update && \
            brew upgrade && \
            brew cleanup -s
            # echo "\n==[ MacPorts ]==========================================================" && \
            # sudo port selfupdate && \
            # sudo port outdated
            # sudo port upgrade outdated
            # echo "Cleaning up ..."
            # sudo port uninstall inactive
            # sudo port uninstall leaves
            echo "\n===[ npm ]=================================================" && \
            npm update -g
            echo "===[ Gems ]================================================" && \
            gem update && \
            gem cleanup
            echo "\n===[ pip ]=================================================" && \
            pip install --user --upgrade $(pip2 list --outdated --format=legacy | awk '/.*/ {print $1}') && \
            pip3 install --user --upgrade $(pip3 list --outdated --format=legacy | awk '/.*/ {print $1}')
            ;;
        Linux)
            echo "===[ apt-get ]=============================================" && \
            sudo apt-get update && \
            sudo apt-get -y upgrade && \
            sudo apt-get -y dist-upgrade && \
            sudo apt-get -y autoremove && \
            sudo apt-get -y remove (deborphan)
            # echo "==[ npm ]==========================================================" && \
            # sudo npm install npm -g && \
            # sudo npm update -g
            echo "===[ Gems ]================================================" && \
            sudo gem update
            echo "===[ pip ]================================================="
            if [ $(cat /etc/issue) -eq "Ubuntu" ]
            then
                echo "pip updates not supported on Ubuntu as some packages are owned by the system."
            else
                sudo python -m pip install --upgrade (python -m pip list --outdated | awk '/.*/ {print $1}') && \
                sudo python3 -m pip install --upgrade (python3 -m pip list --outdated | awk '/.*/ {print $1}')
            fi
            ;;
        FreeBSD)
            echo "===[ System Software Update ]==============================" && \
            freebsd-update fetch upgrade &&
            freebsd-update install
            echo "\n===[ Update Ports ]========================================" && \
            portsnap fetch update
            echo "\n===[ Compile and Upgrade Software ]========================" && \
            synth upgrade-system
            echo "\n===[ npm ]=================================================" && \
            npm update -g
            echo "===[ Gems ]================================================" && \
            gem update && \
            gem cleanup
            echo "\n===[ pip ]=================================================" && \
            pip install --user --upgrade $(pip2 list --outdated --format=legacy | awk '/.*/ {print $1}') && \
            pip3 install --user --upgrade $(pip3 list --outdated --format=legacy | awk '/.*/ {print $1}')
            ;;
        *)
            echo "Not supported on $(uname)."
    esac
}

#
# Opens man pages in Dash.app.
#

function mand {
  if (( $# > 0 )); then
    open "dash://man:$1" 2>/dev/null
    if (( $? != 0 )); then
      print "$0: Dash is not installed" >&2
      break
    fi
  else
    print 'What manual page do you want?' >&2
  fi
}

#
# Opens man pages in Preview.app.
#

function manp {
  local page
  if (( $# > 0 )); then
    for page in "$@"; do
      man -t "$page" | open -f -a Preview
    done
  else
    print 'What manual page do you want?' >&2
  fi
}

function removetags {
  local file
  if (( $# > 0 )); then
    for f in "$@"; do
      tag --remove \* $f
    done
  else
    print 'Please specify files.' >&2
  fi
}

function pinfo {
  local port
  local mp
  local hb
  if (( $# > 0 )); then
    for port in "$@"; do
      mp=`port info $port | awk '/.+ @/ {print $2}' | sed 's/@//'`
      echo "MacPorts version: $mp" && \
      hb=`brew info $port | head -n 1 | awk '/.*: / {print $3}' | sed 's/,//'`
      echo "Homebrew version: $hb"
    done
  else
    print 'Please specify files.' >&2
  fi

}

function ssht {
  if [ -z "$1" ]; then
    echo "usage: $0 <hostname>";
  fi
  $(which ssh) $1 -t "sh -c 'tmux a || tmux'";
}

function new-project {
  if [ -z "$1" ]; then
    echo "usage: $0 <project-name>";
  else
    git clone https://github.com/herrbischoff/project-template $1 && \
    cd $1 && \
    rm -rf .git/ && \
    git init && \
    cd 04_Development && \
    npm install && \
    cd .. && \
    echo "*---===[ All done! You may start coding now. ] ===---*"
  fi
}

# fh - repeat history
fh() {
  print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

# fstash - easier way to deal with stashes
# type fstash to get a list of your stashes
# enter shows you the contents of the stash
# ctrl-d shows a diff of the stash against your current HEAD
# ctrl-b checks the stash out as a branch, for easier merging
fstash() {
  local out q k sha
  while out=$(
    git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
    fzf --ansi --no-sort --query="$q" --print-query \
        --expect=ctrl-d,ctrl-b);
  do
    mapfile -t out <<< "$out"
    q="${out[0]}"
    k="${out[1]}"
    sha="${out[-1]}"
    sha="${sha%% *}"
    [[ -z "$sha" ]] && continue
    if [[ "$k" == 'ctrl-d' ]]; then
      git diff $sha
    elif [[ "$k" == 'ctrl-b' ]]; then
      git stash branch "stash-$sha" $sha
      break;
    else
      git stash show -p $sha
    fi
  done
}

# fcs - get git commit SHA
# example usage: git rebase -i `fcs`
fcs() {
  local commits commit
  commits=$(git log --color=always --pretty=oneline --abbrev-commit --reverse) &&
  commit=$(echo "$commits" | fzf --tac +s +m -e --ansi --reverse) &&
  echo -n $(echo "$commit" | sed "s/ .*//")
}
